#!/bin/bash

# This scirpt is run by the roll install process.
# The script:
#      creates files and directories for ejabberd 
#      starts ejabberd daemon 
#      creates admin user and ipop user 
#

#=============================================================== 
#    Define functions
#=============================================================== 

# set installation variables 
SetDefaults() {
    # export rocks commands
    export PATH=$PATH:/opt/rocks/bin    # include rocks commands

    INSTDIR=@PKGROOT@		# install dir
    CMD=$INSTDIR/sbin/ejabberdctl	# ejabberd command
    EJUSER=@EJUSER@			# user to run daemons
    ETCDIR=$INSTDIR/etc			# directory for config and auth files

    LOGDIR=@LOGDIR@		# log directory
    LOCKDIR=@LOCKDIR@	# lock directory
    SPOOLDIR=@SPOOLDIR@		# spool directory

    PEMFILE=$ETCDIR/ejabberd.pem	# pem file

    IPOPADMIN=@ADMUSER@			# ipop admin user
    IPOPUSER=@IPOPUSER@			# ipop user
    IPOPHOST=ejabberd			# ipop host
    IPOPPASS=$ETCDIR/.ejabberd.pass	# ipop admin user password

    TURNUSER=@TURNUSER@                 # turn user

    DATE=$(/bin/date +%Y%m%d-%H%M)	# timestamp when script is run

    INFO=@IPOPDIR@/etc/ipopserver.info	# ipop server info file
    CONFIG=@IPOPDIR@/etc/config.json    # ipop server config file

    HTTPD_USER=apache
    IPOP_PHP_DIR=/var/www/html/ipop
    IPOP_IP_DB=$IPOP_PHP_DIR/db.json

    # first and last octet to use for setting host ipop ip
    OCTET1=172
    OCTET4=254
    # get server hostname and ip address
    ServerPublicInfo
}

# create admin user password
CreateAdminPass () {
    echo "Creating admin user password file"
    # save previous 
    if [ -f $IPOPPASS ] ; then
	/bin/mv $IPOPPASS $IPOPPASS.$DATE
        echo "INFO: Saved previous $IPOPPASS as $IPOPPASS.$DATE"
    fi

    word=`mkpasswd -l 8 -d 2 -C 3 -s 0`   # random password 
    /bin/echo $word > $IPOPPASS
    /bin/chown -R $EJUSER:$EJUSER $IPOPPASS
    /bin/chmod -R 600 $IPOPPASS
}

# add admin user
RegisterAdmin () {
    echo "Creating admin user account"
    if  $CMD status > /dev/null; then
        $CMD register $IPOPADMIN $IPOPHOST `/bin/cat $IPOPPASS`
    fi
}

# add pragma user
AddUser () {
    if [ ! -f $INFO ] ; then
        return
    fi
    echo "Creating user account"

    . $INFO

    if  $CMD status > /dev/null; then
        # same IPOUSER and IPOHOST as were used for generating ipopserver.info file
        $CMD register $IPOPUSER $IPOPHOST $xmpp_password
    fi
}

CreateServerFile () {
    # save previous 
    if [ -f $INFO ] ; then
	/bin/mv $INFO $INFO.$DATE
        echo "INFO: Saved previous $INFO as $INFO.$DATE"
    fi
    if [ -f $CONFIG ] ; then
        /bin/mv $CONFIG $CONFIG.$DATE
        echo "INFO: Saved previous $CONFIG as $CONFIG.$DATE"
    fi

    # use host IP for ipop IP: change first octet and last octets
    ipopIP=`echo $hostIP | sed -e "s%^[0-9][0-9]*%$OCTET1%" -e "s%[0-9][0-9]*$%$OCTET4%"`

    # ipop user password
    xmpp_password=`mkpasswd -l 8 -d 2 -C 3 -s 0` 

    echo "xmpp_username=$IPOPUSER@$IPOPHOST"  > $INFO
    echo "xmpp_password=$xmpp_password" >> $INFO
    echo "xmpp_host=$hostIP" >> $INFO
    echo "ip4=$ipopIP" >> $INFO

    # turn user password
    turn_password=`mkpasswd -l 8 -d 2 -C 3 -s 0` 
    echo "turn_username=$TURNUSER"  >> $INFO
    echo "turn_host=$hostIP" >> $INFO
    echo "turn_password=$turn_password" >> $INFO
}

# create a html directory for ipop
CreateHtmlDir () {
    if [ -f $IPOP_IP_DB ]; then
      /bin/mv $IPOP_IP_DB $IPOP_IP_DB.$DATE
      echo "INFO: Saved previous $$IPOP_IP_DB as $$IPOP_IP_DB.$DATE"
    fi
    echo "Creating directory $1"
    /bin/mkdir -p $1
    /bin/chown -R $HTTPD_USER:$HTTPD_USER $1
    /bin/chmod -R 755 $1
}

# create a directory and set its ownershp and permisisons
CreateDir () {
    echo "Creating directory $1"
    /bin/mkdir -p $1
    /bin/chown -R $EJUSER:$EJUSER $1
    /bin/chmod -R 750 $1
}

# create log, lock and sppol directories
SetVarDirs () {
    CreateDir $LOGDIR   # create @LOGDIR@ 
    CreateDir $LOCKDIR  # create @LOCKDIR@
    CreateDir $SPOOLDIR # create @SPOOLDIR@ 
    /bin/rm -f $SPOOLDIR/*   # clear out existing db
}

# set cookie file permissions
SetCookieFile () {
    echo "Setting $COOKIEFILE permissions"
    COOKIEFILE=$SPOOLDIR/.erlang.cookie # erlang cookie file
    [ ! -f $COOKIEFILE ] || { /bin/chown $EJUSER:$EJUSER $COOKIEFILE ; /bin/chmod 400 $COOKIEFILE ; }
}

ServerPublicInfo () {
    # find host FQDN and ip.
    hostFQDN=`rocks list host attr localhost | /bin/grep Kickstart_PublicHostname | awk '{print $3}'` # FQDN
    hostIP=`rocks list host attr localhost | /bin/grep Kickstart_PublicAddress | awk '{print $3}'`    # IP
}

# append to ejabberd config file
CreateCtlConfig () {
    hostIPerl=`echo  ${hostIP//\./\,}` # IP in erlang notation (commas in place of dots)

    CTLCFG=$ETCDIR/ejabberdctl.cfg     # ejabberd config file
    echo "Creating $CTLCFG config file."

    # save previous 
    if [ -f $CTLCFG ] ; then
	/bin/mv $CTLCFG $CTLCFG.$DATE
        echo "INFO: Saved previous $CTLCFG as $CTLCFG.$DATE"
    fi

    # create new config 
    if [ -f $CTLCFG.template ] ; then
	/bin/cat $CTLCFG.template > $CTLCFG
        echo  >> $CTLCFG
    else
        /bin/touch $CTLCFG
        echo "WARNING: File $CTLCFG.template does not exist."
    fi

    echo ERLANG_NODE=$EJUSER@$hostFQDN >> $CTLCFG
    echo INET_DIST_INTERFACE={$hostIPerl} >> $CTLCFG
    echo ERL_EPMD_ADDRESS=$hostIP >> $CTLCFG
    echo ERL_INETRC=$hostFQDN >> $CTLCFG
    echo  >> $CTLCFG

    /bin/chown $EJUSER:$EJUSER $CTLCFG
    /bin/chmod 640 $CTLCFG
}

# create $ETCDIR/ejabberd.yml config file
CreateYmlConfig () {
    YMLCFG=$ETCDIR/ejabberd.yml
    echo "Creating $YMLCFG config file."

    # save previous config 
    if [ -f $YMLCFG ] ; then
	/bin/mv $YMLCFG $YMLCFG.$DATE
        echo "INFO: Saved previous $YMLCFG as $YMLCFG.$DATE"
    fi

    # create new config 
    if [ -f $YMLCFG.template ] ; then
	/bin/sed -e "s%@hostFQDN@%$hostFQDN%g" $YMLCFG.template > $YMLCFG
    else
        echo "ERROR: File $YMLCFG.template does not exist."
    fi

    /bin/chown $EJUSER:$EJUSER $YMLCFG
    /bin/chmod 640 $YMLCFG
}

CreateSSLCert () {
    # Create SSL certificate with default values if it doesn't exist
    echo "Generating SSL certificate $PEMFILE ..."
    HOSTNAME=$(hostname -s 2>/dev/null || echo "localhost")
    DOMAINNAME=$(hostname -d 2>/dev/null || echo "localdomain")

    # save previous 
    if [ -f $PEMFILE ] ; then
	/bin/mv $PEMFILE $PEMFILE.$DATE
        echo "INFO: Saved previous $PEMFILE as $PEMFILE.$DATE"
    fi
    openssl req -new -x509 -days 365 -nodes -out $PEMFILE \
            -keyout $PEMFILE > /dev/null 2>&1 << EOF
.
.
.
$DOMAINNAME
$HOSTNAME
ejabberd
root@$HOSTNAME.$DOMAINNAME
EOF

    /bin/chown $EJUSER:$EJUSER $PEMFILE
    /bin/chmod 600 $PEMFILE
}

UpdatePermissions () {
    echo "Updating ejabberd files permissions"
    # for @ETCDIR@
    /bin/chown -R $EJUSER:$EJUSER $ETCDIR
    /bin/chmod  750 $ETCDIR

    # for ejabberdctl command
    /bin/chown $EJUSER:$EJUSER $CMD

    # for @PKGROOT@/lib/ejabberd/priv/bin/
    CAPTCHA=@PKGROOT@/lib/ejabberd/priv/bin/captcha.sh
    /bin/chown $EJUSER:$EJUSER $CAPTCHA

    EPAM=@PKGROOT@/lib/ejabberd/priv/bin/epam
    [ ! -f $EPAM ] || { /bin/chown $EJUSER:$EJUSER $EPAM ; /bin/chmod 750 $EPAM ; }
}

# run ejabberd configuration
PreConfig () {
    SetDefaults
    UpdatePermissions
    SetVarDirs
    SetCookieFile
    CreateCtlConfig
    CreateYmlConfig
    CreateSSLCert
    CreateAdminPass
}

# post startup tasks
PostConfig () {
    RegisterAdmin
    CreateServerFile 
    AddUser
    CreateHtmlDir $IPOP_PHP_DIR
}

#=============================================================== 
#    Run script  
#=============================================================== 

PreConfig
/etc/init.d/ejabberd restart
sleep 10
PostConfig
